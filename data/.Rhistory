model<-train(Class ~., method="rpart",data=training)
model
print(model)
pr<-testing[1,]
pr[2,"TotalIntench2"]<-23000
pr[2,"FiberWidthCh1"]<-10
pr[2,"PerimStatusCh1"]<-2
pr[3,"TotalIntench2"]<-50000
pr[3,"FiberWidthCh1"]<-10
pr[3,"VarIntenCh4"]<-100
pr[4,"TotalIntench2"]<-57000
pr[4,"FiberWidthCh1"]<-8
pr[4,"VarIntenCh4"]<-100
pr[5,"FiberWidthCh1"]<-8
pr[5,"PerimStatusCh1"]<-2
pr[5,"VarIntenCh4"]<-100
predict(model,newdata=pr[2,])
predict(model,newdata=pr)
pr[2,"PerimStatusCh1"]<-2
print(model$finalModel)
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(model$finalModel)
library(rpart)
library(rattle)
fancyRpartPlot(model$finalModel)
testing
predict(model,newdata=testing)
head(testing)
pr
pr<-testing[1,]
pr[2,"TotalIntench2"]<-23000
pr[2,"FiberWidthCh1"]<-10
pr[2,"PerimStatusCh1"]<-2
pr[3,"TotalIntench2"]<-50000
pr[3,"FiberWidthCh1"]<-10
pr[3,"VarIntenCh4"]<-100
pr[4,"TotalIntench2"]<-57000
pr[4,"FiberWidthCh1"]<-8
pr[4,"VarIntenCh4"]<-100
pr[5,"FiberWidthCh1"]<-8
pr[5,"PerimStatusCh1"]<-2
pr[5,"VarIntenCh4"]<-100
pr
rm(pr)
pr<-testing[1,]
pr
pr[2,"TotalIntench2"]<-23000
pr[2,"FiberWidthCh1"]<-10
pr[2,"PerimStatusCh1"]<-2
pr
pr<-testing[1,]
pr[1,"TotalIntench2"]<-23000
pr[1,"FiberWidthCh1"]<-10
pr[1,"PerimStatusCh1"]<-2
pr
pr<-data.frame()
pr<-data.frame()
pr[1,"TotalIntench2"]<-23000
pr[1,"FiberWidthCh1"]<-10
pr[1,"PerimStatusCh1"]<-2
pr[2,"TotalIntench2"]<-50000
pr[2,"FiberWidthCh1"]<-10
pr[2,"VarIntenCh4"]<-100
pr[3,"TotalIntench2"]<-57000
pr[3,"FiberWidthCh1"]<-8
pr[3,"VarIntenCh4"]<-100
pr[4,"FiberWidthCh1"]<-8
pr[4,"PerimStatusCh1"]<-2
pr[4,"VarIntenCh4"]<-100
pr
predict(model,newdata=pr)
training
training$Cell
dat<-segmentationOriginal
inTrain <- createDataPartition(y=dat$Case,
p=0.6, list=FALSE)
training <- dat[inTrain,c("Class","TotalIntench2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
testing <- dat[-inTrain,c("Class","TotalIntench2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
set.seed(125)
model<-train(Class ~., method="rpart",data=training)
names(dat)
training <- dat[inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
inTrain <- createDataPartition(y=dat$Case,
p=0.6, list=FALSE)
training <- dat[inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
testing <- dat[-inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
set.seed(125)
model<-train(Class ~., method="rpart",data=training)
pr<-data.frame()
pr[1,"TotalIntench2"]<-23000
pr[1,"FiberWidthCh1"]<-10
pr[1,"PerimStatusCh1"]<-2
pr[2,"TotalIntench2"]<-50000
pr[2,"FiberWidthCh1"]<-10
pr[2,"VarIntenCh4"]<-100
pr[3,"TotalIntench2"]<-57000
pr[3,"FiberWidthCh1"]<-8
pr[3,"VarIntenCh4"]<-100
pr[4,"FiberWidthCh1"]<-8
pr[4,"PerimStatusCh1"]<-2
pr[4,"VarIntenCh4"]<-100
predict(model,newdata=pr)
pr
predict(model,newdata=pr[1:3,])
rm(pr)
pr<-data.frame()
pr[1,"TotalIntenCh2"]<-23000
pr[1,"FiberWidthCh1"]<-10
pr[1,"PerimStatusCh1"]<-2
pr[2,"TotalIntenCh2"]<-50000
pr[2,"FiberWidthCh1"]<-10
pr[2,"VarIntenCh4"]<-100
pr[3,"TotalIntenCh2"]<-57000
pr[3,"FiberWidthCh1"]<-8
pr[3,"VarIntenCh4"]<-100
predict(model,newdata=pr)
pr
predict(model,newdata=testing)
head(testing)
print(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
model<-train(Area ~., method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(model,newdata)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
dat<-segmentationOriginal
inTrain <- createDataPartition(y=dat$Case,
p=0.6, list=FALSE)
#training <- dat[inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
#testing <- dat[-inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
training <- dat[inTrain,]
testing <- dat[-inTrain,]
set.seed(125)
model<-train(Class ~., method="rpart",data=training)
print(model$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
dat<-segmentationOriginal
inTrain <- createDataPartition(y=dat$Case,
p=0.8, list=FALSE)
#training <- dat[inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
#testing <- dat[-inTrain,c("Class","TotalIntenCh2","FiberWidthCh1","VarIntenCh4","PerimStatusCh1")]
training <- dat[inTrain,]
testing <- dat[-inTrain,]
set.seed(125)
model<-train(Class ~., method="rpart",data=training)
print(model$finalModel)
set.seed(125)
model<-train(Class ~., method="rpart",data=dat)
print(model$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
model<-train(y ~., method="rf",data=vowel.train)
varImp(model, useModel=TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
model<-train(y ~., method="rf",data=vowel.train)
varImp(model, useModel=TRUE)
n
varImp(model)
varImp(model, useModel=FALSE)
varImp(model, useModel=TRUE)
varImp(model, useModel=TRUE)
model
library(pgmm)
data(olive)
olive = olive[,-1]
model<-train(Area ~., method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(model,newdata)
model
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
model<-train(y ~., method="rf",data=vowel.train)
varImp(model, useModel=0)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
mod1<-train(y ~., method="rf",data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
mod1<-train(y ~., method="rf",data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
mod1<-train(y ~., method="rf",data=vowel.train)
mod2 <- train(y ~.,method="glm",data=vowel.train)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
mod1<-train(y ~., method="rf",data=vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
mod1<-train(y ~., method="rf",data=vowel.train)
set.wd("E://program//Machine//data")
train<-read.csv("pml-training.csv")
setwd("E://program//Machine//data")
train<-read.csv("pml-training.csv")
head(train)
names(train)
head(train$x)
head(train$y)
head(train$X)
head(train$classes)
head(train$classe)
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
head(test)
head(test$classe)
names(test)
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
model<-train(classe~.,data=training,method="rf",prox=TRUE)
pr<-predict(model,testing)
library(carot)
library(caret)
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
model<-train(classe~.,data=training,method="rf",prox=TRUE)
pr<-predict(model,testing)
tr$classe
model<-train(classe ~.,data=training,method="rf",prox=TRUE)
model<-train(training$classe ~.,data=training,method="rf",prox=TRUE)
model<-train(training$classe ~.,data=training,method="rf")
model<-train(classe ~.,data=training,method="rf")
model<-train(classe ~.,data=training,method="lm")
pr<-predict(model,testing)
model<-train(trainig$classe ~.,data=training,method="lm")
head(training)
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
model<-train(trainig$classe ~.,data=training,method="rf")
model<-train(classe ~.,data=training,method="rf")
head(training)
library(caret)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- tr[inTrain,]
testing <- tr[-inTrain,]
model<-train(classe ~.,data=training,method="rf")
library(caret)
library(randomForest)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- tr[inTrain,]
testing <- tr[-inTrain,]
model<-train(classe ~.,data=training,method="rf")
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
training <- tr[inTrain,]
testing <- tr[-inTrain,]
preProc <- preProcess(training[,-"classe"]),method="pca",pcaComp=2)
trainPC <- predict(preProc,training[,-"classe"]+1))
#model<-train(classe ~.,data=training,method="rf")
model<-train(training$classe ~.,data=trainPC,method="rf")
pr<-predict(model,testing)
preProc <- preProcess(training[,-"classe"]),method="pca",pcaComp=2)
preProc <- preProcess(training[,-"classe"],method="pca",pcaComp=2)
training
preProc <- preProcess(training[,-160],method="pca",pcaComp=2)
trainPC <- predict(preProc,training[,-160])
head (training)
head(training[,-c(1,2,3,4,5,6,160)])
preProc <- preProcess(training[,-c(1,2,3,4,5,6,160)],method="pca",pcaComp=2)
training[,-c(1,2,3,4,5,6,160)]
summary(training[,-c(1,2,3,4,5,6,160)])
apply(training,is.na)
sapply(training,function <-f(a) {sum(is.na(a))})
?sapply
sapply(training,aa <-function f(a) {sum(is.na(a))})
sapply(training,aa <-function f(a) {sum(is.na(a))})
??apply
f<-function(a) {sum(is.NA(a))}
sapply(training,f)
is.NA(training[,1])
is.NA
is.na
is.na(training[,1])
f<-function(a) {length(which(is.na(a)))}
is.na(training[,1])
sapply(training,f)
b<-sapply(training, f<-function(a) {length(which(is.na(a)))})
b
b==0
training[,b==0]
head(training[,b==0])
b==0
names(head(training[,b==0]))
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
b<-sapply(inTrain, f<-function(a) {length(which(is.na(a)))})
training <- tr[inTrain,b==0]
testing <- tr[-inTrain,b==0]
b
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
training <- tr[inTrain,b==0]
testing <- tr[-inTrain,b==0]
head(training)
preProc <- preProcess(training[,-c(1:7,93))],method="pca",pcaComp=2)
preProc <- preProcess(training[,-c(1:7,93)],method="pca",pcaComp=2)
head(training[,-c(1:7,93)])
training$ kurtosis_roll_arm
head(training$kurtosis_roll_arm)
summary(training)
summary(training[,-c(1:7,93)])
preProc <- preProcess(training[,-c(1:7,12:17,93)],method="pca",pcaComp=2)
sapply(training,class)
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
classes()
type
preProc <- preProcess(training[,type],method="pca",pcaComp=2)
training[,type]
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
training[,(b==0)&type]
trainPC <- predict(training[,(b==0)&type)
trainPC <- predict(training[,(b==0)&type])
trainPC <- predict(preProc,training[,(b==0)&type])
model<-train(classe ~.,data=trainPC,method="rf")
model<-train(training$classe ~.,data=trainPC,method="rf")
model<-train(training$classe ~.,data=training[,(b==0)&type],method="rf")
summary(training[,(b==0)&type])
str(training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
model<-train(training$classe ~.,data=trdata],method="rf")
model<-train(training$classe ~.,data=trdata,method="rf")
prepro <- preProcess(trdata, method=c("center", "scale"))
prepro
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
View(trdatapre)
View(trdata)
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:5)]
View(trdata)
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
model<-train(training$classe ~.,data=trdatapre,method="rf")
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
model<-train(training$classe ~.,data=trdatapre,method="rf")
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
trdatapre2<-predict(preproc2,trdatapre)
View(trdatapre2)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=4)
trdatapre2<-predict(preproc2,trdatapre)
View(trdatapre2)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
model<-train(training$classe ~.,data=trdatapre2,method="glm")
model<-train(training$classe ~.,data=trdatapre2,method="glm")
model<-train(training$classe ~.,data=trdatapre2,method="lm")
model<-train(training$classe ~.,data=trdatapre2,method="rf")
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.1, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
#preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
#trainPC <- predict(preProc,training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=4)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
library(caret)
library(randomForest)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.1, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
#preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
#trainPC <- predict(preProc,training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
trdatapre2<-predict(preproc2,trdatapre)
cx
library(caret)
library(randomForest)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.1, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
#preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
#trainPC <- predict(preProc,training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
library(caret)
library(randomForest)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.2, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
#preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
#trainPC <- predict(preProc,training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
library(caret)
library(randomForest)
setwd("E://program//Machine//data")
tr<-read.csv("pml-training.csv")
test<-read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=tr$classe,
p=0.7, list=FALSE)
b<-sapply(tr, f<-function(a) {length(which(is.na(a)))})
type<-sapply(tr, f<-function(a) {(class(a)=="integer")||(class(a)=="numeric")})
training <- tr[inTrain,]
testing <- tr[-inTrain,]
#preProc <- preProcess(training[,(b==0)&type],method="pca",pcaComp=2)
#trainPC <- predict(preProc,training[,(b==0)&type])
trdata<-training[,(b==0)&type]
trdata<-trdata[,-c(1:4)]
preproc <- preProcess(trdata, method=c("center", "scale"))
trdatapre<-predict(preproc,trdata)
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=2)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=4)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
preproc2 <- preProcess(trdatapre,method="pca",pcaComp=4)
trdatapre2<-predict(preproc2,trdatapre)
model<-train(training$classe ~.,data=trdatapre2,method="rf")
model<-train(training$classe ~.,data=trdatapre,method="glm")
model$finalModel
model
model<-train(training$classe ~.,data=trdatapre,method="glm")
model<-train(training$classe ~.,data=trdatapre2,method="rf")
model<-train(training$classe ~.,data=trdatapre,method="rf")
